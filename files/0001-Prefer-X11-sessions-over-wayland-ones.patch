From ba8dfda4310858d9f501c03f9386c35bc12f4bc2 Mon Sep 17 00:00:00 2001
From: Troy Harvey <harveydevel@gmail.com>
Date: Thu, 18 May 2023 15:12:03 +1000
Subject: [PATCH] Prefer X11 sessions over wayland ones

Reverts https://github.com/sddm/sddm/commit/994fa67b01ccfac1aaac08572302bbbea7842dc3
until we are ready to change defaults

Signed-off-by: Troy Harvey <harveydevel@gmail.com>
---
 src/common/Session.cpp       | 8 ++++----
 src/daemon/Display.cpp       | 6 +++---
 src/greeter/SessionModel.cpp | 6 +++---
 3 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/src/common/Session.cpp b/src/common/Session.cpp
index 5eec648..d8cf4b8 100644
--- a/src/common/Session.cpp
+++ b/src/common/Session.cpp
@@ -192,14 +192,14 @@ namespace SDDM {
         QStringList sessionDirs;

         switch (type) {
-        case WaylandSession:
-            sessionDirs = mainConfig.Wayland.SessionDir.get();
-            m_xdgSessionType = QStringLiteral("wayland");
-            break;
         case X11Session:
             sessionDirs = mainConfig.X11.SessionDir.get();
             m_xdgSessionType = QStringLiteral("x11");
             break;
+        case WaylandSession:
+            sessionDirs = mainConfig.Wayland.SessionDir.get();
+            m_xdgSessionType = QStringLiteral("wayland");
+            break;
         default:
             m_xdgSessionType.clear();
             break;
diff --git a/src/daemon/Display.cpp b/src/daemon/Display.cpp
index 6945093..ac40f7b 100644
--- a/src/daemon/Display.cpp
+++ b/src/daemon/Display.cpp
@@ -211,10 +211,10 @@ namespace SDDM {
         if (autologinSession.isEmpty()) {
             autologinSession = stateConfig.Last.Session.get();
         }
-        if (findSessionEntry(mainConfig.Wayland.SessionDir.get(), autologinSession)) {
-            sessionType = Session::WaylandSession;
-        } else if (findSessionEntry(mainConfig.X11.SessionDir.get(), autologinSession)) {
+        if (findSessionEntry(mainConfig.X11.SessionDir.get(), autologinSession)) {
             sessionType = Session::X11Session;
+        } else if (findSessionEntry(mainConfig.Wayland.SessionDir.get(), autologinSession)) {
+            sessionType = Session::WaylandSession;
         } else {
             qCritical() << "Unable to find autologin session entry" << autologinSession;
             return false;
diff --git a/src/greeter/SessionModel.cpp b/src/greeter/SessionModel.cpp
index d8698b7..a3a57f5 100644
--- a/src/greeter/SessionModel.cpp
+++ b/src/greeter/SessionModel.cpp
@@ -46,9 +46,9 @@ namespace SDDM {

         // initial population
         beginResetModel();
+        populate(Session::X11Session, mainConfig.X11.SessionDir.get());
         if (dri_active)
             populate(Session::WaylandSession, mainConfig.Wayland.SessionDir.get());
-        populate(Session::X11Session, mainConfig.X11.SessionDir.get());
         endResetModel();

         // refresh everytime a file is changed, added or removed
@@ -59,13 +59,13 @@ namespace SDDM {
             beginResetModel();
             d->sessions.clear();
             d->displayNames.clear();
+            populate(Session::X11Session, mainConfig.X11.SessionDir.get());
             if (dri_active)
                 populate(Session::WaylandSession, mainConfig.Wayland.SessionDir.get());
-            populate(Session::X11Session, mainConfig.X11.SessionDir.get());
             endResetModel();
         });
-        watcher->addPaths(mainConfig.Wayland.SessionDir.get());
         watcher->addPaths(mainConfig.X11.SessionDir.get());
+        watcher->addPaths(mainConfig.Wayland.SessionDir.get());
     }

     SessionModel::~SessionModel() {
--
2.40.1
